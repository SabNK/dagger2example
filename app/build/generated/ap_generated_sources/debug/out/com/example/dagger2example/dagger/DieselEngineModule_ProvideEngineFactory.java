// Generated by Dagger (https://dagger.dev).
package com.example.dagger2example.dagger;

import com.example.dagger2example.car.DieselEngine;
import com.example.dagger2example.car.Engine;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DieselEngineModule_ProvideEngineFactory implements Factory<Engine> {
  private final DieselEngineModule module;

  private final Provider<DieselEngine> engineProvider;

  public DieselEngineModule_ProvideEngineFactory(DieselEngineModule module,
      Provider<DieselEngine> engineProvider) {
    this.module = module;
    this.engineProvider = engineProvider;
  }

  @Override
  public Engine get() {
    return provideEngine(module, engineProvider.get());
  }

  public static DieselEngineModule_ProvideEngineFactory create(DieselEngineModule module,
      Provider<DieselEngine> engineProvider) {
    return new DieselEngineModule_ProvideEngineFactory(module, engineProvider);
  }

  public static Engine provideEngine(DieselEngineModule instance, DieselEngine engine) {
    return Preconditions.checkNotNullFromProvides(instance.provideEngine(engine));
  }
}
