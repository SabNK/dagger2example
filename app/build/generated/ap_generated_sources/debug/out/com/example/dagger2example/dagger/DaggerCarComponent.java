// Generated by Dagger (https://dagger.dev).
package com.example.dagger2example.dagger;

import com.example.dagger2example.MainActivity;
import com.example.dagger2example.MainActivity_MembersInjector;
import com.example.dagger2example.car.Car;
import com.example.dagger2example.car.Car_Factory;
import com.example.dagger2example.car.Car_MembersInjector;
import com.example.dagger2example.car.Remote;
import com.example.dagger2example.car.Wheels;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCarComponent {
  private DaggerCarComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private DieselEngineModule dieselEngineModule;

    private Builder() {
    }

    public Builder dieselEngineModule(DieselEngineModule dieselEngineModule) {
      this.dieselEngineModule = Preconditions.checkNotNull(dieselEngineModule);
      return this;
    }

    public CarComponent build() {
      Preconditions.checkBuilderRequirement(dieselEngineModule, DieselEngineModule.class);
      return new CarComponentImpl(dieselEngineModule);
    }
  }

  private static final class CarComponentImpl implements CarComponent {
    private final DieselEngineModule dieselEngineModule;

    private final CarComponentImpl carComponentImpl = this;

    private CarComponentImpl(DieselEngineModule dieselEngineModuleParam) {
      this.dieselEngineModule = dieselEngineModuleParam;

    }

    private Wheels wheels() {
      return WheelsModule_ProvideWheelsFactory.provideWheels(WheelsModule_ProvideRimsFactory.provideRims(), WheelsModule_ProvideTiresFactory.provideTires());
    }

    @Override
    public Car getCar() {
      return injectCar(Car_Factory.newInstance(DieselEngineModule_ProvideEngineFactory.provideEngine(dieselEngineModule), wheels()));
    }

    @Override
    public void inject(MainActivity mainActivity) {
      injectMainActivity(mainActivity);
    }

    private Car injectCar(Car instance) {
      Car_MembersInjector.injectEnableRemote(instance, new Remote());
      return instance;
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectCar(instance, getCar());
      return instance;
    }
  }
}
