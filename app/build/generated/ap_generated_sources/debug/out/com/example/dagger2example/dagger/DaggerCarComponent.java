// Generated by Dagger (https://dagger.dev).
package com.example.dagger2example.dagger;

import com.example.dagger2example.MainActivity;
import com.example.dagger2example.MainActivity_MembersInjector;
import com.example.dagger2example.car.Car;
import com.example.dagger2example.car.Car_Factory;
import com.example.dagger2example.car.Car_MembersInjector;
import com.example.dagger2example.car.PetrolEngine;
import com.example.dagger2example.car.Remote;
import com.example.dagger2example.car.Wheels;
import dagger.internal.DaggerGenerated;
import dagger.internal.Preconditions;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCarComponent {
  private DaggerCarComponent() {
  }

  public static CarComponent.Builder builder() {
    return new Builder();
  }

  private static final class Builder implements CarComponent.Builder {
    private Integer horsepower;

    private Integer engineCapacity;

    @Override
    public Builder horsepower(int horsepower) {
      this.horsepower = Preconditions.checkNotNull(horsepower);
      return this;
    }

    @Override
    public Builder engineCapacity(int engineCapacity) {
      this.engineCapacity = Preconditions.checkNotNull(engineCapacity);
      return this;
    }

    @Override
    public CarComponent build() {
      Preconditions.checkBuilderRequirement(horsepower, Integer.class);
      Preconditions.checkBuilderRequirement(engineCapacity, Integer.class);
      return new CarComponentImpl(horsepower, engineCapacity);
    }
  }

  private static final class CarComponentImpl implements CarComponent {
    private final Integer horsepower;

    private final Integer engineCapacity;

    private final CarComponentImpl carComponentImpl = this;

    private CarComponentImpl(Integer horsepowerParam, Integer engineCapacityParam) {
      this.horsepower = horsepowerParam;
      this.engineCapacity = engineCapacityParam;

    }

    private PetrolEngine petrolEngine() {
      return new PetrolEngine(horsepower, engineCapacity);
    }

    private Wheels wheels() {
      return WheelsModule_ProvideWheelsFactory.provideWheels(WheelsModule_ProvideRimsFactory.provideRims(), WheelsModule_ProvideTiresFactory.provideTires());
    }

    @Override
    public Car getCar() {
      return injectCar(Car_Factory.newInstance(petrolEngine(), wheels()));
    }

    @Override
    public void inject(MainActivity mainActivity) {
      injectMainActivity(mainActivity);
    }

    private Car injectCar(Car instance) {
      Car_MembersInjector.injectEnableRemote(instance, new Remote());
      return instance;
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectCar(instance, getCar());
      return instance;
    }
  }
}
